#!/usr/bin/env bash

# shellcheck source=lib/common.sh
. "${LIB_DIR:-$(cd "${0%/*}/../lib"&&pwd)}/common.sh"

# Get config variables
CONFIG_FILE="$OUT_DIR/config.json"
# Get addresses
loadAddresses

set +x

# shellcheck disable=SC2034
AUTHED="0x0000000000000000000000000000000000000000000000000000000000000001"
# shellcheck disable=SC2034
NOT_AUTHED="0x0000000000000000000000000000000000000000000000000000000000000000"
# shellcheck disable=SC2034
ZERO_ADDR="0x0000000000000000000000000000000000000000"

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

ok() {
    printf '%b\n' "${GREEN}✓ OK${NC}"
}

notok() {
    printf '%b\n' "${RED}❌NOT OK${NC}"
}

checkRely() {
    local CHECK
    CHECK=$(seth call "${!1}" 'wards(address)' "${!2}")

    printf "RELY: %s -> %s -> %s -> " "${1}" "${2}" "${3}"
    if [[ $(toLower "${!3}") == $(toLower "${CHECK}") ]]; then
        ok
    else
        notok
    fi
}

checkAuthority() {
    local CHECK
    CHECK=$(seth call "${!1}" 'authority()(address)')

    printf "AUTH: %s -> %s -> " "${1}" "${2}"
    if [[ $(toLower "${!2}") == $(toLower "${CHECK}") ]]; then
        ok
    else
        notok
    fi
}

checkOwner() {
    local CHECK
    CHECK=$(seth call "${!1}" 'owner()(address)')

    printf "OWN: %s -> %s -> " "${1}" "${2}"
    if [[ $(toLower "${!2}") == $(toLower "${CHECK}") ]]; then
        ok
    else
        notok
    fi
}

checkRoot() {
    local CHECK
    CHECK=$(seth call "${!1}" 'root()(address)')

    printf "OWN: %s -> %s -> " "${1}" "${2}"
    if [[ $(toLower "${!2}") == $(toLower "${CHECK}") ]]; then
        ok
    else
        notok
    fi
}

canCall() {
    local authority
    local CHECK
    authority=$(seth call "${!2}" 'authority()(address)')
    CHECK=$(seth call "${authority}" 'canCall(address,address,bytes4)(bool)' "${!1}" "${!2}" "$(seth sig "$3")")

    printf "CALL: %s -> %s -> %s -> " "${1}" "${2}" "${3}"
    if [[ $CHECK == true ]]; then
        ok
    else
        notok
    fi
}

checkWhitelist() {
    local CHECK
    CHECK=$(seth call "${!1}" 'bud(address)(uint256)' "${!2}" | sed 's/^0*//')

    printf "WHITELIST: %s -> %s -> " "${1}" "${2}"
    if [[ "$CHECK" == 1 ]]; then
        ok
    else
        notok
    fi
}

checkInOsmMom() {
    local CHECK
    CHECK=$(seth call "$OSM_MOM" 'osms(bytes32)(address)' "$(seth --to-bytes32 "$(seth --from-ascii "${1}")")")

    printf "OSM-MOM: %s -> %s -> " "${1}" "${2}"
    if [[ "$CHECK" == "${!2}" ]]; then
        ok
    else
        notok
    fi
}

tokens=$(jq -r ".tokens | keys_unsorted[]" "$CONFIG_FILE")

# vat
checkRely "MCT_VAT" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_VAT" "MCT_CAT" "AUTHED"
checkRely "MCT_VAT" "MCT_JUG" "AUTHED"
checkRely "MCT_VAT" "MCT_POT" "AUTHED"
checkRely "MCT_VAT" "MCT_SPOT" "AUTHED"
checkRely "MCT_VAT" "MCT_END" "AUTHED"
checkRely "MCT_VAT" "MCT_PAUSE_PROXY" "AUTHED"
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        checkRely "MCT_VAT" "MCT_JOIN_${token}_${ilk}" "AUTHED"
        checkRely "MCT_JOIN_${token}_${ilk}" "MCT_PAUSE_PROXY" "AUTHED"
        checkRely "MCT_JOIN_${token}_${ilk}" "DEPLOYER" "NOT_AUTHED"
    done
done
if [[ -n "$MIGRATION" ]]; then
    checkRely "MCT_VAT" "MCT_JOIN_SAI" "AUTHED"
    checkRely "MCT_JOIN_SAI" "MCT_PAUSE_PROXY" "AUTHED"
    checkRely "MCT_JOIN_SAI" "MIGRATION" "AUTHED"
    checkRely "MCT_JOIN_SAI" "DEPLOYER" "NOT_AUTHED"
fi

# cat
checkRely "MCT_CAT" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_CAT" "MCT_END" "AUTHED"
checkRely "MCT_CAT" "MCT_PAUSE_PROXY" "AUTHED"

# vow
checkRely "MCT_VOW" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_VOW" "MCT_CAT" "AUTHED"
checkRely "MCT_VOW" "MCT_END" "AUTHED"
checkRely "MCT_VOW" "MCT_PAUSE_PROXY" "AUTHED"

# jug
checkRely "MCT_JUG" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_JUG" "MCT_PAUSE_PROXY" "AUTHED"

# pot
checkRely "MCT_POT" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_POT" "MCT_PAUSE_PROXY" "AUTHED"

# dai
checkRely "MCT_TAO" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_TAO" "MCT_JOIN_TAO" "AUTHED"

# spotter
checkRely "MCT_SPOT" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_SPOT" "MCT_PAUSE_PROXY" "AUTHED"

# flap
checkRely "MCT_FLAP" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_FLAP" "MCT_VOW" "AUTHED"
checkRely "MCT_FLAP" "MCT_PAUSE_PROXY" "AUTHED"

# flop
checkRely "MCT_FLOP" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_FLOP" "MCT_VOW" "AUTHED"
checkRely "MCT_FLOP" "MCT_PAUSE_PROXY" "AUTHED"

# end
checkRely "MCT_END" "MCT_DEPLOY" "NOT_AUTHED"
checkRely "MCT_END" "MCT_ESM" "AUTHED"
checkRely "MCT_END" "MCT_PAUSE_PROXY" "AUTHED"

#flips
for token in $tokens; do
    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        checkRely "MCT_FLIP_${token}_${ilk}" "MCT_DEPLOY" "NOT_AUTHED"
        checkRely "MCT_FLIP_${token}_${ilk}" "MCT_CAT" "AUTHED"
        checkRely "MCT_FLIP_${token}_${ilk}" "MCT_END" "AUTHED"
        checkRely "MCT_FLIP_${token}_${ilk}" "MCT_PAUSE_PROXY" "AUTHED"
    done
done
if [[ -n "$MIGRATION" ]]; then
    checkRely "MCT_FLIP_SAI" "MCT_DEPLOY" "NOT_AUTHED"
    checkRely "MCT_FLIP_SAI" "MCT_END" "AUTHED"
    checkRely "MCT_FLIP_SAI" "MCT_PAUSE_PROXY" "AUTHED"
fi

# faucet
faucet=$(jq -r ".import.faucet | values" "$CONFIG_FILE")
if [[ -z "$faucet" ]]; then
    checkRely "FAUCET" "DEPLOYER" "AUTHED"
fi

# pause
checkOwner "MCT_PAUSE" "ZERO_ADDR"
checkAuthority "MCT_PAUSE" "MCT_ADM"

# chief
checkOwner "MCT_ADM" "ZERO_ADDR"
checkAuthority "MCT_ADM" "MCT_ADM"

# pip SAI
if [[ -n "$MIGRATION" ]]; then
    checkOwner "PIP_SAI" "MCT_PAUSE_PROXY"
    checkAuthority "PIP_SAI" "ZERO_ADDR"
fi

# gov guard
if [[ -n "$GOV_GUARD" ]]; then
    checkRoot "GOV_GUARD" "MCT_PAUSE_PROXY"
fi

# gov
canCall "MCT_FLOP" "MCT_GOV" "mint(address,uint256)"
canCall "MCT_FLAP" "MCT_GOV" "burn(address,uint256)"

# iou
if [[ -n "$MCT_IOU" ]]; then
    checkOwner "MCT_IOU" "MCT_ADM"
    checkAuthority "MCT_IOU" "ZERO_ADDR"
fi

# osms and medians whitelist
for token in $tokens; do
    pipAddr=$(jq -r ".tokens.${token} | .import.pip | values" "$CONFIG_FILE")
    type=$(jq -r ".tokens.${token} | .pipDeploy | .type | values" "$CONFIG_FILE")
    osmDelay=$(jq -r ".tokens.${token} | .pipDeploy | .osmDelay | values" "$CONFIG_FILE")

    if [[ "$pipAddr" != "" || "$type" == "median" || "$osmDelay" -gt 0 ]]; then
        checkWhitelist "PIP_${token}" "MCT_SPOT"
        checkWhitelist "PIP_${token}" "MCT_END"
    fi

    if [[ "$pipAddr" == "" && "$type" == "median" && "$osmDelay" -gt 0 ]]; then
        checkWhitelist "VAL_${token}" "PIP_${token}"
    fi

    ilks=$(jq -r ".tokens.${token}.ilks | keys_unsorted[]" "$CONFIG_FILE")
    for ilk in $ilks; do
        # Workaround to see if there is a 'src()' method => assume is an OSM
        src=$(seth call "$(eval echo "\$PIP_${token}")" 'src()(address)' 2>/dev/null)
        # if PIP is an OSM
        if [[ ${#src} == 42 && "${src:0:2}" == "0x" ]]; then
            checkInOsmMom "${token}-${ilk}" "PIP_${token}"
            checkRely "PIP_${token}" "OSM_MOM" "AUTHED"
        fi
    done
done
